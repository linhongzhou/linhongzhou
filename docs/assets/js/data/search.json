[
  
  {
    "title": "How to install Mysql 5.7 in docker container on Ubuntu 18.04",
    "url": "/posts/install-mysql-in-docker-container/",
    "categories": "Operating",
    "tags": "docker, mysql, ubuntu",
    "date": "2021-08-11 00:34:00 +0800",
    





    "snippet": "Installing MySQL in docker container is an easy process which can be done by pulling a docker image, deploying the MySQL container and connecting to the MySQL Docker ContainerStep 1 - pull the docker imageThe first step is to pull the docker image. Here we are downloading the 5.7 version. However, if you wish to install a particular version then you can replace the latest tag with the version number.sudo docker pull  mysql:5.7Step 2 - verify your imageVerify if your image is locally stored or not by running the below command.docker imagesIf everything is ok,you will see the message below:mysql                5.7       8b94b71dcc1e   4 days ago      448MBStep 3 - Prepare directory for mountingFirst, create conf.d directory on the host machine:mkdir -p /data/mysql/conf.dThe conf.d directory will be mounting to /etc/mysql/conf.d in container.Second, create mysql-data directory on the host machine:mkdir -p /data/mysql/mysql-dataThe mysql-data directory will be mounting to /var/lib/mysql in container.Step 4 - Run the mysql server containersudo docker run --detach \\  --env &quot;MYSQL_ROOT_PASSWORD=123456&quot; \\  --publish 3306:3306 \\  --name mysql-server \\  --restart always \\  --volume /data/mysql/conf.d:/etc/mysql/conf.d \\  --volume /data/mysql/mysql-data:/var/lib/mysql \\ mysql:5.7Step 5 - Install mysql client apt-get install mysql-clientStep 6 - Connect to Mysql serverconnect in container:sudo docker exec -it mysql-server mysql -h localhost -u root -pconnect in host machine:mysql -h localhost -u root -pconnect in remote client:mysql -h 192.168.1.188 -u root -p"
  },
  
  {
    "title": "How to install gitlab with docker on Ubuntu 18.04",
    "url": "/posts/install-gitlab-with-docker-on-ubuntu-18-04/",
    "categories": "Operating",
    "tags": "docker, ubuntu, gitlab",
    "date": "2021-02-09 20:55:00 +0800",
    





    "snippet": "In this tutorial, you will install and configure GitLab, a popular open-source application that primarily hosts Git repositories, on Ubuntu 18.04.PrerequisitesTo follow this tutorial, you will need the following:  Ubuntu 18.04 Server  Min RAM memory 4GB - for better performance, use 8GB  Root privileges  Docker is required(see How to install and use docker on ubuntu 18.04)InstallationCreating gitlab homemkdir -p /data/gitlabexport GITLAB_HOME=/data/gitlabInstalling gitlab by dockersudo docker run --detach \\  --publish 8008:80 \\  --publish 8022:22 \\  --name gitlab \\  --restart always \\  --volume $GITLAB_HOME/config:/etc/gitlab \\  --volume $GITLAB_HOME/logs:/var/log/gitlab \\  --volume $GITLAB_HOME/data:/var/opt/gitlab \\  --shm-size 2048m \\  gitlab/gitlab-ce:latestconfigurationyou can change the configurations in the /data/gitlab, or enter the docker container .sudo docker exec -it gitlab /bin/bashexternal_hostedit the file /etc/gitlab/gitlab.rb:external_url &#39;http://192.168.1.188&#39;ssh portedit the file /etc/gitlab/gitlab.rbvim /etc/gitlab/gitlab.rbFind the line below and change the ssh port to 8022:gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 8022ssh hostedit the file:/var/opt/gitlab/gitlab-rails/etcvim /var/opt/gitlab/gitlab-rails/etcfind the host name ,something like ‘e8d66a682bbe’, and change all of those to your real ip or server name.vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml  ## GitLab settings  gitlab:    ## Web server settings (note: host is the FQDN, do not include http://)    # host: e8d66a682bbe    host: 192.168.1.188    port: 80    https: falsegitlab-ctl reconfigurerun reconfigure command in the container’s bash terminal:gitlab-ctl reconfigurerestart gitlab containersudo docker restart gitlab"
  },
  
  {
    "title": "How to install Redis on Ubuntu 18",
    "url": "/posts/install-redis/",
    "categories": "Operating",
    "tags": "ubuntu, redis",
    "date": "2021-01-08 14:10:00 +0800",
    





    "snippet": "IntroductionRedis is an in-memory key-value store known for its flexibility, performance, and wide language support. This tutorial demonstrates how to install, configure, and secure Redis on an Ubuntu 18.04 server.PrerequisitesTo complete this guide, you will need access to an Ubuntu 18.04 server that has a non-root user with sudo privileges and a basic firewall configured.When you are ready to begin, log in to your Ubuntu 18.04 server as your sudo user and continue below.Step 1 — Installing and Configuring RedisIn order to get the latest version of Redis, we will use apt to install it from the official Ubuntu repositories.First, update your local apt package cache if you haven’t done so recently:sudo apt updateThen, install Redis by typing:sudo apt install redis-serverThis will download and install Redis and its dependencies.Following this, there is one important configuration change to make in the Redis configuration file, which was generated automatically during the installation.Open this file with your preferred text editor:sudo vim /etc/redis/redis.confInside the file, find the supervised directive. This directive allows you to declare an init system to manage Redis as a service, providing you with more control over its operation. The supervised directive is set to no by default. Since you are running Ubuntu, which uses the systemd init system, change this to systemd:# If you run Redis from upstart or systemd, Redis can interact with your# supervision tree. Options:#   supervised no      - no supervision interaction#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET#   supervised auto    - detect upstart or systemd method based on#                        UPSTART_JOB or NOTIFY_SOCKET environment variables# Note: these supervision methods only signal &quot;process is ready.&quot;#       They do not enable continuous liveness pings back to your supervisor.supervised systemdThat’s the only change you need to make to the Redis configuration file at this point, so save and close it when you are finished. Then, restart the Redis service to reflect the changes you made to the configuration file:sudo systemctl restart redis.serviceStep 2 — Testing RedisAs with any newly-installed software, it’s a good idea to ensure that Redis is functioning as expected before making any further changes to its configuration. We will go over a handful of ways to check that Redis is working correctly in this step.Start by checking that the Redis service is running:sudo systemctl status redisIf it is running without any errors, this command will produce output similar to the following:● redis-server.service - Advanced key-value store   Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)   Active: active (running) since Mon 2022-03-07 18:25:56 CST; 16h ago     Docs: http://redis.io/documentation,           man:redis-server(1)  Process: 1451 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf (code=exited, status=0/SUCCESS) Main PID: 1529 (redis-server)    Tasks: 4 (limit: 8601)   CGroup: /system.slice/redis-server.service           └─1529 /usr/bin/redis-server 127.0.0.1:6379Here, you can see that Redis is running and is already enabled, meaning that it is set to start up every time the server boots.  Note: This setting is desirable for many common use cases of Redis. If, however, you prefer to start up Redis manually every time your server boots, you can configure this with the following command:  sudo systemctl disable redis  To test that Redis is functioning correctly, connect to the server using the command-line client:redis-cliIn the prompt that follows, test connectivity with the ping command:127.0.0.1:6379&amp;gt; pingOutputPONGThis output confirms that the server connection is still alive. Next, check that you’re able to set keys by running:set test “It’s working!”OutputOKRetrieve the value by typing:get testOutput&quot;It&#39;s working!&quot;As a final test, we will check whether Redis is able to persist data even after it’s been stopped or restarted. To do this, first restart the Redis instance:get testThe value of your key should still be accessible:Output&quot;It&#39;s working!&quot;Exit out into the shell again when you are finished:127.0.0.1:6379&amp;gt; exitStep 3 — Configuring a Redis PasswordConfiguring a Redis password enables one of its two built-in security features — the auth command, which requires clients to authenticate to access the database. The password is configured directly in Redis’s configuration file, /etc/redis/redis.conf, so open that file again with your preferred editor:sudo nano /etc/redis/redis.confScroll to the SECURITY section and look for a commented directive that reads:requirepass your_redis_passwordUncomment it by removing the #, and change foobared to a secure password.After setting the password, save and close the file, then restart Redis:sudo systemctl restart redis.serviceTo test that the password works, access the Redis command line:redis-cliThe following shows a sequence of commands used to test whether the Redis password works. The first command tries to set a key to a value before authentication:127.0.0.1:6379&amp;gt; set key1 0(error) NOAUTH Authentication required.That won’t work because you didn’t authenticate, so Redis returns an error:(error) NOAUTH Authentication required.The next command authenticates with the password specified in the Redis configuration file:auth your_redis_passwordRedis acknowledges:OutputOKAfter that, running the previous command again will succeed:127.0.0.1:6379&amp;gt; set key1 0OKConclusionIn this tutorial, you installed and configured Redis, validated that your Redis installation is functioning correctly, and used its built-in security features to make it less vulnerable to attacks from malicious actors.Reference  How To Install and Secure Redis on Ubuntu 18.04"
  },
  
  {
    "title": "How to install and use docker on ubuntu 18.04",
    "url": "/posts/install-and-use-docker-on-ubuntu-18-04/",
    "categories": "Operating",
    "tags": "docker, ubuntu",
    "date": "2021-01-04 07:32:00 +0800",
    





    "snippet": "In this tutorial, you’ll install and use Docker Community Edition (CE) on Ubuntu 18.04. You’ll install Docker itself, work with containers and images.IntroductionDocker is an application that simplifies the process of managing application processes in containers. Containers let you run your applications in resource-isolated processes. They’re similar to virtual machines, but containers are more portable, more resource-friendly, and more dependent on the host operating system.PrerequisitesTo complete this guide, you will need access to an Ubuntu 18.04 server that has a non-root user with sudo privileges and a basic firewall configured.When you are ready to begin, log in to your Ubuntu 18.04 server as your sudo user and continue below.Step 1 — Installing DockerSet up the repositoryBefore you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository.  Update the apt package index and install packages to allow apt to use a repository over HTTPS:sudo apt updatesudo apt-get install \\    ca-certificates \\    curl \\    gnupg \\    lsb-release  Add Docker’s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg  Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below.echo \\  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/nullInstall Docker Engine  Update the apt package index, and install the latest version of Docker Engine and containerdsudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io  Verify that Docker Engine is installed correctly by running the hello-world image.    sudo docker run hello-world      This command downloads a test image and runs it in a container. When the container runs, it prints a message and exits.Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:sudo systemctl status dockerStep 2 — Using the Docker CommandUsing docker consists of passing it a chain of options and commands followed by arguments. The syntax takes this form:docker [option] [command] [arguments]To view current version of docker, type:docker -vYou’ll see output like this, although the version number for Docker may be different:Docker version 20.10.12, build e91ed57To view all available subcommands, type:dockerAs of Docker 20, the complete list of available subcommands includes:Usage:  docker [OPTIONS] COMMANDA self-sufficient runtime for containersOptions:      --config string      Location of client config files (default &quot;/home/topsee/.docker&quot;)  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default                           context set with &quot;docker context use&quot;)  -D, --debug              Enable debug mode  -H, --host list          Daemon socket(s) to connect to  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)      --tls                Use TLS; implied by --tlsverify      --tlscacert string   Trust certs signed only by this CA (default &quot;/home/topsee/.docker/ca.pem&quot;)      --tlscert string     Path to TLS certificate file (default &quot;/home/topsee/.docker/cert.pem&quot;)      --tlskey string      Path to TLS key file (default &quot;/home/topsee/.docker/key.pem&quot;)      --tlsverify          Use TLS and verify the remote  -v, --version            Print version information and quitManagement Commands:  app*        Docker App (Docker Inc., v0.9.1-beta3)  builder     Manage builds  buildx*     Docker Buildx (Docker Inc., v0.7.1-docker)  config      Manage Docker configs  container   Manage containers  context     Manage contexts  image       Manage images  manifest    Manage Docker image manifests and manifest lists  network     Manage networks  node        Manage Swarm nodes  plugin      Manage plugins  scan*       Docker Scan (Docker Inc., v0.12.0)  secret      Manage Docker secrets  service     Manage services  stack       Manage Docker stacks  swarm       Manage Swarm  system      Manage Docker  trust       Manage trust on Docker images  volume      Manage volumesCommands:  attach      Attach local standard input, output, and error streams to a running container  build       Build an image from a Dockerfile  commit      Create a new image from a container&#39;s changes  cp          Copy files/folders between a container and the local filesystem  create      Create a new container  diff        Inspect changes to files or directories on a container&#39;s filesystem  events      Get real time events from the server  exec        Run a command in a running container  export      Export a container&#39;s filesystem as a tar archive  history     Show the history of an image  images      List images  import      Import the contents from a tarball to create a filesystem image  info        Display system-wide information  inspect     Return low-level information on Docker objects  kill        Kill one or more running containers  load        Load an image from a tar archive or STDIN  login       Log in to a Docker registry  logout      Log out from a Docker registry  logs        Fetch the logs of a container  pause       Pause all processes within one or more containers  port        List port mappings or a specific mapping for the container  ps          List containers  pull        Pull an image or a repository from a registry  push        Push an image or a repository to a registry  rename      Rename a container  restart     Restart one or more containers  rm          Remove one or more containers  rmi         Remove one or more images  run         Run a command in a new container  save        Save one or more images to a tar archive (streamed to STDOUT by default)  search      Search the Docker Hub for images  start       Start one or more stopped containers  stats       Display a live stream of container(s) resource usage statistics  stop        Stop one or more running containers  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE  top         Display the running processes of a container  unpause     Unpause all processes within one or more containers  update      Update configuration of one or more containers  version     Show the Docker version information  wait        Block until one or more containers stop, then print their exit codesRun &#39;docker COMMAND --help&#39; for more information on a command.To view system-wide information about Docker, use:docker info"
  },
  
  {
    "title": "How to set up a regular system user on Ubuntu 18.04",
    "url": "/posts/setup-regular-system-user-on-ubuntu/",
    "categories": "Operating",
    "tags": "ubuntu",
    "date": "2021-01-02 11:33:00 +0800",
    





    "snippet": "Newly installed servers typically have only a root account set up, and that is the account you’ll use to log into your server for the first time.The root user is an administrative user that has very broad privileges. Because of the heightened privileges of the root account, you are discouraged from using it on a regular basis. This is because part of the power inherent to the root account is the ability to make very destructive changes, even by accident. For that reason, the recommended practice is to set up a regular system user and give this user sudo permissions, so that it may run administrative commands with certain limitations. In this tutorial, you’ll set up such a user.Step 1 — Logging in as RootTo get started, you’ll need to log into your server as the root user with the following command:ssh root@your_server_ipStep 2 — Creating a New UserOnce you are logged in as root, you can create a new user that will be your regular system user from now on.The following command creates a new user called lin, but you should replace it with a username of your choice:adduser linStep 3 — Granting Administrative PrivilegesYou have now a new user account with regular privileges. Sometimes, however, you’ll need to perform administrative tasks, like managing servers, editing configuration files, or restarting a server.To avoid having to log out of your regular user and log back in as the root account, you can set up what are known as “superuser” or root privileges for your regular account. This will allow your regular user to run commands with administrative privileges by prefixing each command with the word sudo.To add these privileges to you new user, you need to add the new user to the sudo group. By default on Ubuntu 18.04, users who belong to the sudo group are allowed to use the sudo command.The following command will modify the default user settings, including the sudo group in the list of groups a user already belongs to. Pay attention to the -a argument, which stands for append. Without this option, the current groups a user is linked to would be replaced by sudo, which would cause unexpected consequences. The -G argument tells usermod to change a user’s group settings.As root, run this command to add your new user to the sudo group (replace the highlighted word with your new user):usermod -aG sudo linYour system user is now set up."
  }
  
]

